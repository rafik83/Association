<?php

namespace Ben\AssociationBundle\Entity;

use Doctrine\ORM\EntityRepository;
use Doctrine\ORM\Tools\Pagination\Paginator;

/**
 * CotisationRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class CotisationRepository extends EntityRepository
{
    public function search($searchParam = array()) {
        extract($searchParam);    
        $qb = $this->createQueryBuilder('c')
                ->leftJoin('c.user', 'u')
                ->addSelect('u')
                ->leftJoin('u.profile', 'p')
                ->addSelect('p')
                ->leftJoin('p.image', 'img')
                ->addSelect('img')
                ->leftJoin('u.groups', 'g')
                ->addSelect('g');
        if(!empty($keyword))
            $qb->andWhere('concat(p.family_name, p.first_name) like :keyword or u.username like :keyword or c.description like :keyword')
        		->setParameter('keyword', '%'.$keyword.'%');
        if(!empty($group))
            $qb->andWhere('g.id = :group')->setParameter('group', $group);
        if(!empty($cin))
            $qb->andWhere('p.cin = :cin')->setParameter('cin', $cin);
        if(!empty($type))
            $qb->andWhere('c.type = :type')->setParameter('type', $type);
        if(!empty($date)){
            $date = explode("-",$date);
            $qb->andWhere('c.date_from between :d1 and :d2')
            ->setParameter('d1', $date[0])
            ->setParameter('d2', $date[1]);
        }
        if(!empty($page))
            $qb->setFirstResult(($page - 1) * $perPage)->setMaxResults($perPage);
        
       return new Paginator($qb->getQuery());
    }

    public function counter() {
        $qb = $this->createQueryBuilder('c')->select('COUNT(c)');
        return $qb->getQuery()->getSingleScalarResult();
    }

    public function daysleft($id)
    {
        $query = "select DATE_FORMAT(max(date_to),'%d-%m-%Y') date, DATEDIFF(max(date_to) , now()) days from cotisation where user_id = $id";

        $stmt = $this->getEntityManager()->getConnection()->prepare($query);
        $stmt->execute();
        // var_dump($stmt->fetchAll()[0]);die;
        return  $stmt->fetchAll()[0];
    }
}
